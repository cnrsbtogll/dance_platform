import React, { useState } from 'react';
import Button from '../common/components/ui/Button';
import { 
  doc, 
  collection,
  setDoc, 
  getDocs,
  getDoc,
  serverTimestamp,
  query,
  limit
} from 'firebase/firestore';
import { db } from '../api/firebase/firebase';

// Örnek başarı rozetleri
const sampleAchievements = [
  {
    id: 'salsa-beginner',
    name: 'Salsa Başlangıç',
    description: 'İlk Salsa dersini tamamladınız',
    danceStyle: 'salsa',
    level: 'beginner',
    iconUrl: '/assets/images/badges/salsa-beginner.png',
    requiredClasses: 1,
    points: 10
  },
  {
    id: 'salsa-intermediate',
    name: 'Salsa Orta Seviye',
    description: '10 Salsa dersini tamamladınız',
    danceStyle: 'salsa',
    level: 'intermediate',
    iconUrl: '/assets/images/badges/salsa-intermediate.png',
    requiredClasses: 10,
    points: 50
  },
  {
    id: 'salsa-advanced',
    name: 'Salsa İleri Seviye',
    description: '25 Salsa dersini tamamladınız',
    danceStyle: 'salsa',
    level: 'advanced',
    iconUrl: '/assets/images/badges/salsa-advanced.png',
    requiredClasses: 25,
    points: 100
  },
  {
    id: 'bachata-beginner',
    name: 'Bachata Başlangıç',
    description: 'İlk Bachata dersini tamamladınız',
    danceStyle: 'bachata',
    level: 'beginner',
    iconUrl: '/assets/images/badges/bachata-beginner.png',
    requiredClasses: 1,
    points: 10
  },
  {
    id: 'bachata-intermediate',
    name: 'Bachata Orta Seviye',
    description: '10 Bachata dersini tamamladınız',
    danceStyle: 'bachata',
    level: 'intermediate',
    iconUrl: '/assets/images/badges/bachata-intermediate.png',
    requiredClasses: 10,
    points: 50
  },
  {
    id: 'bachata-advanced',
    name: 'Bachata İleri Seviye',
    description: '25 Bachata dersini tamamladınız',
    danceStyle: 'bachata',
    level: 'advanced',
    iconUrl: '/assets/images/badges/bachata-advanced.png',
    requiredClasses: 25,
    points: 100
  },
  {
    id: 'consistent-learner',
    name: 'Düzenli Öğrenci',
    description: '5 hafta üst üste derse katıldınız',
    danceStyle: 'all',
    iconUrl: '/assets/images/badges/consistent-learner.png',
    requiredClasses: 5,
    points: 30
  },
  {
    id: 'dance-explorer',
    name: 'Dans Kâşifi',
    description: 'En az 3 farklı dans stilinde ders aldınız',
    danceStyle: 'all',
    iconUrl: '/assets/images/badges/dance-explorer.png',
    points: 40
  },
  {
    id: 'performance-ready',
    name: 'Gösteri Hazır',
    description: 'İlk dans gösterinizi tamamladınız',
    danceStyle: 'all',
    iconUrl: '/assets/images/badges/performance-ready.png',
    points: 75
  },
  {
    id: 'social-dancer',
    name: 'Sosyal Dansçı',
    description: '5 farklı sosyal dans etkinliğine katıldınız',
    danceStyle: 'all',
    iconUrl: '/assets/images/badges/social-dancer.png',
    points: 50
  }
];

// Örnek ilerleme durumu kayıtları için şablon
const createSampleProgress = (userId: string, courseId: string) => {
  return {
    userId,
    courseId,
    completedLessons: Math.floor(Math.random() * 10),
    totalLessons: 10,
    lastAttendance: new Date(Date.now() - Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000)),
    startDate: new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)),
    achievements: [
      sampleAchievements[Math.floor(Math.random() * 3)].id
    ],
    notes: '',
    createdAt: serverTimestamp(),
    updatedAt: serverTimestamp()
  };
};

// Örnek kurs katılım kayıtları için şablon
const createSampleAttendance = (userId: string, courseId: string) => {
  const attendances = [];
  const today = new Date();
  
  // Son 4 haftanın rastgele günlerinde katılım oluştur
  for (let i = 0; i < 4; i++) {
    if (Math.random() > 0.3) { // %70 ihtimalle katılım gerçekleşmiş
      const date = new Date(today);
      date.setDate(today.getDate() - (i * 7));
      
      attendances.push({
        userId,
        courseId,
        date,
        status: Math.random() > 0.2 ? 'attended' : 'late', // %80 zamanında, %20 geç kalma
        notes: '',
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
    }
  }
  
  return attendances;
};

const CreateProgressCollectionsButton: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [createdCollections, setCreatedCollections] = useState<string[]>([]);

  const createProgressCollections = async () => {
    setLoading(true);
    setSuccess(false);
    setError(null);
    setCreatedCollections([]);
    
    try {
      const collections = ['achievements', 'progress', 'attendance'];
      const createdColls = [];
      
      // Achievements koleksiyonunu oluştur
      for (const achievement of sampleAchievements) {
        await setDoc(doc(db, 'achievements', achievement.id), {
          ...achievement,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        });
      }
      createdColls.push('achievements');
      
      // Örnek ilerleme kayıtları oluşturmak için örnek kullanıcıları al
      const usersQuery = query(collection(db, 'users'), limit(5));
      const usersSnapshot = await getDocs(usersQuery);
      
      if (usersSnapshot.empty) {
        setError('Örnek ilerleme kayıtları oluşturmak için kullanıcı bulunamadı. Önce örnek kullanıcılar ekleyin.');
        setLoading(false);
        return;
      }
      
      // Örnek kursları al
      const coursesQuery = query(collection(db, 'courses'), limit(5));
      const coursesSnapshot = await getDocs(coursesQuery);
      
      if (coursesSnapshot.empty) {
        setError('Örnek ilerleme kayıtları oluşturmak için kurs bulunamadı. Önce örnek kurslar ekleyin.');
        setLoading(false);
        return;
      }
      
      // Her kullanıcı ve kurs için ilerleme ve katılım kayıtları oluştur
      const progressPromises: Promise<void>[] = [];
      const attendancePromises: Promise<void>[] = [];
      
      usersSnapshot.forEach(userDoc => {
        const userId = userDoc.id;
        
        coursesSnapshot.forEach(courseDoc => {
          const courseId = courseDoc.id;
          
          // Her kullanıcı için her kursta ilerleme oluştur (50% ihtimalle)
          if (Math.random() > 0.5) {
            const progressId = `${userId}_${courseId}`;
            const progress = createSampleProgress(userId, courseId);
            progressPromises.push(setDoc(doc(db, 'progress', progressId), progress));
            
            // Katılım kayıtları oluştur
            const attendances = createSampleAttendance(userId, courseId);
            attendances.forEach((attendance, index) => {
              const attendanceId = `${userId}_${courseId}_${index}`;
              attendancePromises.push(setDoc(doc(db, 'attendance', attendanceId), attendance));
            });
          }
        });
      });
      
      await Promise.all(progressPromises);
      createdColls.push('progress');
      
      await Promise.all(attendancePromises);
      createdColls.push('attendance');
      
      setCreatedCollections(createdColls);
      setSuccess(true);
    } catch (err: any) {
      console.error('İlerleme koleksiyonları oluşturulurken hata:', err);
      setError(`İlerleme koleksiyonları oluşturulurken bir hata oluştu: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="create-progress-collections-container">
      <div className="mb-3">
        <p>Bu buton ilerleme durumu sayfası için gerekli Firebase koleksiyonlarını oluşturur:</p>
        <ul className="list-disc pl-5 mt-2 mb-2">
          <li><strong>achievements</strong> - Başarı rozetleri ve ödülleri</li>
          <li><strong>progress</strong> - Kullanıcıların kurslardaki ilerleme durumları</li>
          <li><strong>attendance</strong> - Kurslara katılım kayıtları</li>
        </ul>
        <p><strong>Not:</strong> Bu işlem, mevcut örnek kullanıcılar ve kurslar için rastgele ilerleme ve katılım kayıtları oluşturur. Önce örnek kullanıcılar ve kurslar eklediğinizden emin olun.</p>
      </div>
      
      <Button 
        onClick={createProgressCollections} 
        disabled={loading}
        loading={loading}
        variant="primary"
      >
        {loading ? 'Koleksiyonlar Oluşturuluyor...' : 'İlerleme Koleksiyonlarını Oluştur'}
      </Button>
      
      {success && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mt-3" role="alert">
          <span className="block sm:inline">Başarılı! Şu koleksiyonlar oluşturuldu: {createdCollections.join(', ')}</span>
        </div>
      )}
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mt-3" role="alert">
          <span className="block sm:inline">{error}</span>
        </div>
      )}
    </div>
  );
};

export default CreateProgressCollectionsButton; 